generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quotaLimit      Int			  @default(100)
  plan            Plan            @default(FREE)
  name            String?
  email           String?         @unique
  apiKey 		  String?		  @unique	@db.Text
  discordId       String?
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?       @default(dbgenerated("now()")) @updatedAt
  accounts        Account[]
  events          Event[]
  EventCategories EventCategory[]
  Quota           Quota[]
  sessions        Session[]

  @@index([email, apiKey])
  @@map("users")
}

model Account {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String	@db.Uuid
  type              String?
  provider          String?
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String  @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  
  @@map("verification_token")
}



model EventCategory {
  id        String   @id @default(cuid())
  name      String
  color     Int
  emoji     String?
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  user      User     @relation(fields: [userId], references: [id])

  @@unique([name, userId])
}

model Event {
  id               String         @id @default(cuid())
  formattedMessage String
  userId           String         @db.Uuid
  name             String
  fields           Json
  deliveryStatus   DeliveryStatus @default(PENDING)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  eventCategoryId  String?
  EventCategory    EventCategory? @relation(fields: [eventCategoryId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id])

  @@index([createdAt])
}

model Quota {
  id        String   @id @default(cuid())
  userId    String   @db.Uuid
  year      Int
  month     Int
  count     Int      @default(0)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, year, month], name: "quota_by_user_month_year")
}

enum Plan {
  FREE
  PRO
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}
